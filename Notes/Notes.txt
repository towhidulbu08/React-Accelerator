L-2.3<=>State: A Component's Memory:
Components often need to change what’s on the screen as a result of an interaction. Typing into the form should update the input field, clicking “next” on an image carousel should change which image is displayed, clicking “buy” should put a product in the shopping cart. Components need to “remember” things: the current input value, the current image, the shopping cart. In React, this kind of component-specific memory is called state.

=> When A Local Variable Is not Enough: 
i.Local variables don’t persist between renders. When React renders this component a second time, it renders it from scratch—it doesn’t consider any changes to the local variables.
ii.Changes to local variables won’t trigger renders. React doesn’t realize it needs to render the component again with the new data.

To update a component with new data, two things need to happen:

i.Retain the data between renders.
ii.Trigger React to render the component with new data (re-rendering).

The useState Hook provides those two things:

i.A state variable to retain the data between renders.
ii.A state setter function to update the variable and trigger React to render the component again.



=> Meet your first Hook 
In React, useState, as well as any other function starting with “use”, is called a Hook.

Hooks are special functions that are only available while React is rendering (which we’ll get into in more detail on the next page). They let you “hook into” different React features.

State is just one of those features, but you will meet the other Hooks later.

=>Pitfall:
Hooks—functions starting with use—can only be called at the top level of your components or your own Hooks. You can’t call Hooks inside conditions, loops, or other nested functions. Hooks are functions, but it’s helpful to think of them as unconditional declarations about your component’s needs. You “use” React features at the top of your component similar to how you “import” modules at the top of your file.

=>State is isolated and private:
State is local to a component instance on the screen. In other words, if you render the same component twice, each copy will have completely isolated state! Changing one of them will not affect the other.
Unlike props, state is fully private to the component declaring it. The parent component can’t change it. This lets you add state to any component or remove it without impacting the rest of the components.

=>Recap
i.Use a state variable when a component needs to “remember” some information between renders.
ii.State variables are declared by calling the useState Hook.
iii.Hooks are special functions that start with use. They let you “hook into” React features like state.
iv.Hooks might remind you of imports: they need to be called unconditionally. Calling Hooks, including useState, is only valid at the top level of a component or another Hook.
v.The useState Hook returns a pair of values: the current state and the function to update it.
vi.You can have more than one state variable. Internally, React matches them up by their order.
vii.State is private to the component. If you render it in two places, each copy gets its own state.

=>Questions:

i.Difference Between Local Variable(Regular Variable) And State Variable:

Local variables: Re-initialized on every render, do not persist changes between renders.Changes to local variables won’t trigger renders. React doesn’t realize it needs to render the component again with the new data.
State variables: Persist between renders, changes to state trigger re-renders, and the new state value is retained across renders.

ii. Difference Between props And State 
